[[plugins]]
repo = 'Shougo/deoplete.nvim'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsSnippetDirectories=["UltiSnips", "~/.config/nvim/UltiSnips/"]
'''

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap <leader>db :Denite buffer<CR>
    nnoremap <leader>dg :Denite grep<CR>
    nnoremap <leader>df :Denite file_rec<CR>
    nnoremap <leader>dl :Denite line<CR>
    " Change file_rec command.
    call denite#custom#var('file_rec', 'command',
          \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    "	" For ripgrep
    "	" Note: It is slower than ag
    "	call denite#custom#var('file_rec', 'command',
    "	\ ['rg', '--files', '--glob', '!.git', ''])
    "	" For Pt(the platinum searcher)
    "	" NOTE: It also supports windows.
    "	call denite#custom#var('file_rec', 'command',
    "	\ ['pt', '--follow', '--nocolor', '--nogroup',
    "	\  (has('win32') ? '-g:' : '-g='), ''])
    "	"For python script scantree.py (works if python 3.5+ in path)
    "	"Read bellow on this file to learn more about scantree.py
    "	call denite#custom#var('file_rec', 'command', ['scantree.py'])

    " Change mappings.
    call denite#custom#map(
          \ 'insert',
          \ '<C-j>',
          \ '<denite:move_to_next_line>',
          \ 'noremap'
          \)
    call denite#custom#map(
          \ 'insert',
          \ '<C-k>',
          \ '<denite:move_to_previous_line>',
          \ 'noremap'
          \)

    " Change matchers.
    call denite#custom#source(
          \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source(
          \ 'file_rec', 'matchers', ['matcher_cpsm'])

    " Change sorters.
    call denite#custom#source(
          \ 'file_rec', 'sorters', ['sorter_sublime'])

    " Add custom menus
    "	let s:menus = {}
    "
    "	let s:menus.zsh = {
    "		\ 'description': 'Edit your import zsh configuration'
    "		\ }
    "	let s:menus.zsh.file_candidates = [
    "		\ ['zshrc', '~/.config/zsh/.zshrc'],
    "		\ ['zshenv', '~/.zshenv'],
    "		\ ]
    "
    "	let s:menus.my_commands = {
    "		\ 'description': 'Example commands'
    "		\ }
    "	let s:menus.my_commands.command_candidates = [
    "		\ ['Split the window', 'vnew'],
    "		\ ['Open zsh menu', 'Denite menu:zsh'],
    "		\ ]

    "	call denite#custom#var('menu', 'menus', s:menus)

    " Ag command on grep source
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
          \ ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    "	" Ack command on grep source
    "	call denite#custom#var('grep', 'command', ['ack'])
    "	call denite#custom#var('grep', 'default_opts',
    "			\ ['--ackrc', $HOME.'/.ackrc', '-H',
    "			\  '--nopager', '--nocolor', '--nogroup', '--column'])
    "	call denite#custom#var('grep', 'recursive_opts', [])
    "	call denite#custom#var('grep', 'pattern_opt', ['--match'])
    "	call denite#custom#var('grep', 'separator', ['--'])
    "	call denite#custom#var('grep', 'final_opts', [])

    "	" Ripgrep command on grep source
    "	call denite#custom#var('grep', 'command', ['rg'])
    "	call denite#custom#var('grep', 'default_opts',
    "			\ ['--vimgrep', '--no-heading'])
    "	call denite#custom#var('grep', 'recursive_opts', [])
    "	call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    "	call denite#custom#var('grep', 'separator', ['--'])
    "	call denite#custom#var('grep', 'final_opts', [])

    " Pt command on grep source
    "	call denite#custom#var('grep', 'command', ['pt'])
    "	call denite#custom#var('grep', 'default_opts',
    "			\ ['--nogroup', '--nocolor', '--smart-case'])
    "	call denite#custom#var('grep', 'recursive_opts', [])
    "	call denite#custom#var('grep', 'pattern_opt', [])
    "	call denite#custom#var('grep', 'separator', ['--'])
    "	call denite#custom#var('grep', 'final_opts', [])
    "
    "	" jvgrep command on grep source
    "	call denite#custom#var('grep', 'command', ['jvgrep'])
    "	call denite#custom#var('grep', 'default_opts', [])
    "	call denite#custom#var('grep', 'recursive_opts', ['-R'])
    "	call denite#custom#var('grep', 'pattern_opt', [])
    "	call denite#custom#var('grep', 'separator', [])
    "	call denite#custom#var('grep', 'final_opts', [])

    " Define alias
    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
          \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#alias('source', 'file_rec/py', 'file_rec')
    call denite#custom#var('file_rec/py', 'command',['scantree.py'])

    " Change default prompt
    call denite#custom#option('default', 'prompt', '>')

    " Change ignore_globs
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
          \ [ '.git/', '.ropeproject/', '__pycache__/',
          \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    " Custom action
    "	call denite#custom#action('file', 'test',
    "	      \ {context -> execute('let g:foo = 1')})
    "	call denite#custom#action('file', 'test2',
    "	      \ {context -> denite#do_action(
    "	      \  context, 'open', context['targets'])})
"
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    noremap <leader>fi :NERDTreeToggle<CR>
    nnoremap <leader>ft :tabnew<CR>:NERDTreeToggle<CR>
    let g:NERDTreeShowHidden=1
    let g:NERDTreeShowBookmarks=1
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'chriskempson/vim-tomorrow-theme'

[[plugins]]
repo = 'mopp/mopkai.vim'

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai


'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
" set background=dark
" colorscheme hybrid
'''

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
    " ### tender
    " Theme
    " syntax enable
    " " 256色¬
    " set t_Co=256
    " " 背景色¬
    " set background=dark
    " colorscheme tender
    " let g:airline_theme = 'tender'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  " set background=dark
  " colorscheme solarized
'''

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  " colorscheme jellybeans
  " set background=dark
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_javascript_checkers = ["eslint"]
'''

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_leader_key='<C-t>'
'''

[[plugins]]
repo = 'alpaca-tc/html5.vim'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'mxw/vim-jsx'

[[plugins]]
repo = 'miya-masa/vim-esformatter'
hook_add = '''
    " for html
    autocmd FileType html,hbs noremap <buffer> <c-f> :call HtmlBeautify()<cr>
    " for css or scss
    autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
    " My Bundles here:

    " will run esformatter after pressing <leader> followed by the 'e' and 's' keys
    autocmd FileType javascript noremap <silent>  <c-f> :Esformatter<CR>
    autocmd FileType javascript vnoremap <silent>  <c-f> :EsformatterVisual<CR>
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
    " vim-go
    let g:go_fmt_command = "goimports"
    let g:go_autodetect_gopath = 1
    let g:go_list_type = "quickfix"

    " highlight
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_generate_tags = 1

    " lint
    let g:go_metalinter_autosave_enabled = ['vet','errcheck', 'golint']
    let g:go_metalinter_autosave = 1
    let g:go_def_mode = 'godef'
    let g:go_term_mode = 'vsplit'

    " Guru Scope
    let g:go_guru_scope = ["git.aptpod.co.jp/intdash/intdash-api/api/..." ,"git.aptpod.co.jp/intdash/intdash-api/api/...","git.aptpod.co.jp/intdash/intdash-api/cmd/...","git.aptpod.co.jp/intdash/intdash-api/pubsub/...","git.aptpod.co.jp/intdash/intdash-api/rdb/...","git.aptpod.co.jp/intdash/intdash-api/tsdb/...","git.aptpod.co.jp/intdash/intdash-api/ws/..."]

    " Open :GoDeclsDir with ctrl-g
    nmap <C-g> :GoDeclsDir<cr>
    imap <C-g> <esc>:<C-u>GoDeclsDir<cr>


    augroup go
      autocmd!
      " Show by default 4 spaces for a tab
      autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
      " :GoBuild and :GoTestCompile
      autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
      " :GoTest
      autocmd FileType go nmap <leader>t  <Plug>(go-test)
      " :GoRun
      autocmd FileType go nmap <leader>r  <Plug>(go-run)
      " :GoDoc
      autocmd FileType go nmap <Leader>d <Plug>(go-doc)
      " :GoCoverageToggle
      autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
      " :GoInfo
      autocmd FileType go nmap <Leader>i <Plug>(go-info)
      " :GoMetaLinter
      autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)
      " :GoDef but opens in a vertical split
      autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
      " :GoDef but opens in a horizontal split
      autocmd FileType go nmap <Leader>ss <Plug>(go-def-split)
      " :GoTestFunc
      autocmd FileType go nmap <Leader>ff <Plug>(go-test-func)

      " :GoAlternate  commands :A, :AV, :AS and :AT
      autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
      autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
      autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
      autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
    augroup END


    " build_go_files is a custom function that builds or compiles the test file.
    " It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
    function! s:build_go_files()
      let l:file = expand('%')
      if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
      elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
      endif
    endfunction
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'jodosha/vim-godebug'

[[plugins]]
repo = 'zchee/deoplete-go'
hook_post_update = '''
  let cmd = 'make'
  let g:dein#plugin.build = cmd
'''
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'kylef/apiblueprint.vim'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'yaasita/edit-slack.vim'
hook_add = '''
    if filereadable(expand('~/.vimrc.slack'))
      source ~/.vimrc.slack
    endif
    command! SlackPG :tabe slack://pg
    command! SlackCH :tabe slack://ch
    command! SlackDM :tabe slack://dm
    command! SlackME :tabe slack://dm/miyauchi.m
'''

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
    call camelcasemotion#CreateMotionMappings('<leader>')
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
  let g:previm_open_cmd = 'open -a Google\ Chrome'

  augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  augroup END
'''


[[plugins]]
repo = 'vim-scripts/DrawIt'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'aklt/plantuml-syntax'
hook_add = '''
au FileType plantuml command! OpenUml :!open -a Google\ Chrome %
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '''!has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if   = '''!has('nvim')'''

